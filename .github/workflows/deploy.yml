name: Deploy LegiSync

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Run build
        run: npm run build

  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        env:
          # Mock API keys for testing
          VOYAGE_API_KEY: test_key
          PINECONE_API_KEY: test_key
          LANGCHAIN_API_KEY: test_key
        run: |
          python -m pytest

  e2e-tests:
    needs: [test-frontend, test-backend]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          npx wait-on http://localhost:3000
        env:
          BACKEND_URL: http://localhost:8000

      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./frontend
          start: npm start
          wait-on: "http://localhost:3000"

  deploy-infrastructure:
    if: github.ref == 'refs/heads/main'
    needs: [test-frontend, test-backend, e2e-tests]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./iac

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -var-file="prod.tfvars"
        env:
          TF_VAR_vercel_api_token: ${{ secrets.VERCEL_API_TOKEN }}
          TF_VAR_pinecone_api_key: ${{ secrets.PINECONE_API_KEY }}
          TF_VAR_langchain_api_key: ${{ secrets.LANGCHAIN_API_KEY }}
          TF_VAR_voyage_api_key: ${{ secrets.VOYAGE_API_KEY }}
          TF_VAR_google_api_key: ${{ secrets.GOOGLE_API_KEY }}
          TF_VAR_anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -var-file="prod.tfvars"
        env:
          TF_VAR_vercel_api_token: ${{ secrets.VERCEL_API_TOKEN }}
          TF_VAR_pinecone_api_key: ${{ secrets.PINECONE_API_KEY }}
          TF_VAR_langchain_api_key: ${{ secrets.LANGCHAIN_API_KEY }}
          TF_VAR_voyage_api_key: ${{ secrets.VOYAGE_API_KEY }}
          TF_VAR_google_api_key: ${{ secrets.GOOGLE_API_KEY }}
          TF_VAR_anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
